/* tslint:disable */
/* eslint-disable */
/**
 * Tech Radar API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration";
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from "axios";
import globalAxios from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from "./common";
import type { RequestArgs } from "./base";
// @ts-ignore
import {
  BASE_PATH,
  BaseAPI,
  operationServerMap,
} from "./base";

/**
 * Class ColorSettings.
 * @export
 * @interface ColorSettings
 */
export interface ColorSettings {
  /**
   * Gets or sets the background.
   * @type {string}
   * @memberof ColorSettings
   */
  background?: string | null;
  /**
   * Gets or sets the grid.
   * @type {string}
   * @memberof ColorSettings
   */
  grid?: string | null;
  /**
   * Gets or sets the inactive.
   * @type {string}
   * @memberof ColorSettings
   */
  inactive?: string | null;
}
/**
 * Class SimpleTag.
 * @export
 * @interface ItemTag
 */
export interface ItemTag {
  /**
   * Gets or sets the tag identifier.
   * @type {number}
   * @memberof ItemTag
   */
  tagId?: number;
  /**
   * Gets or sets the name.
   * @type {string}
   * @memberof ItemTag
   */
  name?: string | null;
}
/**
 * Class Quadrant.
 * @export
 * @interface Quadrant
 */
export interface Quadrant {
  /**
   * Gets or sets the identifier.
   * @type {number}
   * @memberof Quadrant
   */
  id?: number;
  /**
   * Gets or sets the radar identifier.
   * @type {number}
   * @memberof Quadrant
   */
  radarId?: number;
  /**
   * Gets or sets the name.
   * @type {string}
   * @memberof Quadrant
   */
  name: string;
  /**
   * Gets or sets the color.
   * @type {string}
   * @memberof Quadrant
   */
  color: string;
  /**
   * Gets or sets the position.
   * @type {number}
   * @memberof Quadrant
   */
  position: number;
}
/**
 * Class Radar.
 * @export
 * @interface Radar
 */
export interface Radar {
  /**
   * Gets or sets the identifier.
   * @type {number}
   * @memberof Radar
   */
  id?: number;
  /**
   * Gets or sets the title.
   * @type {string}
   * @memberof Radar
   */
  title?: string | null;
  /**
   * Gets or sets the description.
   * @type {string}
   * @memberof Radar
   */
  description?: string | null;
  /**
   * Gets or sets the color of the background.
   * @type {string}
   * @memberof Radar
   */
  backgroundColor?: string | null;
  /**
   * Gets or sets the color of the gridline.
   * @type {string}
   * @memberof Radar
   */
  gridlineColor?: string | null;
  /**
   * Gets or sets the color of the inactive.
   * @type {string}
   * @memberof Radar
   */
  inactiveColor?: string | null;
}
/**
 * Class RadarArc.
 * @export
 * @interface RadarArc
 */
export interface RadarArc {
  /**
   * Gets or sets the identifier.
   * @type {number}
   * @memberof RadarArc
   */
  id?: number;
  /**
   * Gets or sets the radar identifier.
   * @type {number}
   * @memberof RadarArc
   */
  radarId?: number;
  /**
   * Gets or sets the name.
   * @type {string}
   * @memberof RadarArc
   */
  name: string;
  /**
   * Gets or sets the radius.
   * @type {number}
   * @memberof RadarArc
   */
  radius: number;
  /**
   * Gets or sets the color.
   * @type {string}
   * @memberof RadarArc
   */
  color: string;
  /**
   * Gets or sets the position.
   * @type {number}
   * @memberof RadarArc
   */
  position: number;
}
/**
 * Class RadarData.
 * @export
 * @interface RadarData
 */
export interface RadarData {
  /**
   * Gets or sets the title.
   * @type {string}
   * @memberof RadarData
   */
  title?: string | null;
  /**
   * Gets or sets the height.
   * @type {number}
   * @memberof RadarData
   */
  height?: number;
  /**
   * Gets or sets the width.
   * @type {number}
   * @memberof RadarData
   */
  width?: number;
  /**
   *
   * @type {ColorSettings}
   * @memberof RadarData
   */
  colors?: ColorSettings;
  /**
   * Gets or sets the quadrants.
   * @type {Array<RadarQuadrant>}
   * @memberof RadarData
   */
  quadrants?: Array<RadarQuadrant> | null;
  /**
   * Gets or sets the rings.
   * @type {Array<RadarRing>}
   * @memberof RadarData
   */
  rings?: Array<RadarRing> | null;
  /**
   * Gets or sets the entries.
   * @type {Array<RadarEntry>}
   * @memberof RadarData
   */
  entries?: Array<RadarEntry> | null;
}
/**
 * Class RadarEntry.
 * @export
 * @interface RadarEntry
 */
export interface RadarEntry {
  /**
   * Gets or sets the quadrant.
   * @type {number}
   * @memberof RadarEntry
   */
  quadrant?: number;
  /**
   * Gets or sets the ring.
   * @type {number}
   * @memberof RadarEntry
   */
  ring?: number;
  /**
   * Gets or sets the label.
   * @type {string}
   * @memberof RadarEntry
   */
  label?: string | null;
  /**
   * Gets or sets the Legend Key for the item
   * @type {string}
   * @memberof RadarEntry
   */
  legendKey?: string | null;
  /**
   * Gets or sets a value indicating whether this Spydersoft.TechRadar.Api.Models.RadarViewObjects.RadarEntry is active.
   * @type {boolean}
   * @memberof RadarEntry
   */
  active?: boolean;
  /**
   * Gets or sets the link.
   * @type {string}
   * @memberof RadarEntry
   */
  link?: string | null;
  /**
   * Gets or sets the moved.
   * @type {number}
   * @memberof RadarEntry
   */
  moved?: number;
  /**
   * Gets or sets a value indicating whether this instance is new.
   * @type {boolean}
   * @memberof RadarEntry
   */
  isNew?: boolean;
}
/**
 * Class RadarItem.
 * @export
 * @interface RadarItem
 */
export interface RadarItem {
  /**
   * Gets or sets the identifier.
   * @type {number}
   * @memberof RadarItem
   */
  id?: number;
  /**
   * Gets or sets the quadrant identifier.
   * @type {number}
   * @memberof RadarItem
   */
  quadrantId?: number;
  /**
   * Gets or sets the radar identifier.
   * @type {number}
   * @memberof RadarItem
   */
  radarId?: number;
  /**
   * Gets or sets the arc identifier.
   * @type {number}
   * @memberof RadarItem
   */
  arcId?: number;
  /**
   * Gets or sets the name.
   * @type {string}
   * @memberof RadarItem
   */
  name?: string | null;
  /**
   * Gets or sets the URL.
   * @type {string}
   * @memberof RadarItem
   */
  url?: string | null;
  /**
   * Gets or sets the rank.
   * @type {number}
   * @memberof RadarItem
   */
  rank?: number;
  /**
   * Gets or sets the legend key.
   * @type {string}
   * @memberof RadarItem
   */
  legendKey?: string | null;
  /**
   * Gets or sets the movement direction.
   * @type {number}
   * @memberof RadarItem
   */
  movementDirection?: number;
  /**
   * Gets or sets the date created.
   * @type {string}
   * @memberof RadarItem
   */
  dateCreated?: string;
  /**
   * Gets or sets the date updated.
   * @type {string}
   * @memberof RadarItem
   */
  dateUpdated?: string;
  /**
   * Gets or sets the tags.
   * @type {Array<RadarItemTag>}
   * @memberof RadarItem
   */
  tags?: Array<RadarItemTag> | null;
  /**
   * Gets or sets the note field.
   * @type {string}
   * @memberof RadarItem
   */
  note?: string | null;
}
/**
 * Class RadarItemNote.  Implements the Spydersoft.TechRadar.Api.Data.IRadarDataItem
 * @export
 * @interface RadarItemNote
 */
export interface RadarItemNote {
  /**
   * Gets or sets the identifier.
   * @type {number}
   * @memberof RadarItemNote
   */
  id?: number;
  /**
   * Gets or sets the radar item identifier.
   * @type {number}
   * @memberof RadarItemNote
   */
  radarItemId?: number;
  /**
   * Gets or sets the notes.
   * @type {string}
   * @memberof RadarItemNote
   */
  notes?: string | null;
  /**
   * Gets or sets the user identifier.
   * @type {string}
   * @memberof RadarItemNote
   */
  userId?: string | null;
  /**
   * Gets or sets the date created.
   * @type {string}
   * @memberof RadarItemNote
   */
  dateCreated?: string;
  /**
   * Gets or sets the date updated.
   * @type {string}
   * @memberof RadarItemNote
   */
  dateUpdated?: string;
}
/**
 * Class RadarItemTag.
 * @export
 * @interface RadarItemTag
 */
export interface RadarItemTag {
  /**
   * Gets or sets the identifier.
   * @type {number}
   * @memberof RadarItemTag
   */
  id?: number;
  /**
   * Gets or sets the radar item identifier.
   * @type {number}
   * @memberof RadarItemTag
   */
  radarItemId?: number;
  /**
   * Gets or sets the tag identifier.
   * @type {number}
   * @memberof RadarItemTag
   */
  tagId?: number;
}
/**
 * Class RadarQuadrant.
 * @export
 * @interface RadarQuadrant
 */
export interface RadarQuadrant {
  /**
   * Gets or sets the name.
   * @type {string}
   * @memberof RadarQuadrant
   */
  name?: string | null;
  /**
   * Gets or sets the color.
   * @type {string}
   * @memberof RadarQuadrant
   */
  color?: string | null;
}
/**
 * Class RadarRing.
 * @export
 * @interface RadarRing
 */
export interface RadarRing {
  /**
   * Gets or sets the name.
   * @type {string}
   * @memberof RadarRing
   */
  name?: string | null;
  /**
   * Gets or sets the color.
   * @type {string}
   * @memberof RadarRing
   */
  color?: string | null;
  /**
   * Gets or sets the radius.
   * @type {number}
   * @memberof RadarRing
   */
  radius?: number;
}
/**
 * Class Tag.
 * @export
 * @interface Tag
 */
export interface Tag {
  /**
   * Gets or sets the identifier.
   * @type {number}
   * @memberof Tag
   */
  id?: number;
  /**
   * Gets or sets the radar identifier.
   * @type {number}
   * @memberof Tag
   */
  radarId?: number;
  /**
   * Gets or sets the name.
   * @type {string}
   * @memberof Tag
   */
  name?: string | null;
  /**
   * Gets or sets the description.
   * @type {string}
   * @memberof Tag
   */
  description?: string | null;
}

/**
 * ArcApi - axios parameter creator
 * @export
 */
export const ArcApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Deletes an Arc
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arcIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("arcIdDelete", "id", id);
      const localVarPath = `/Arc/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arcIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("arcIdGet", "id", id);
      const localVarPath = `/Arc/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {RadarArc} [radarArc] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arcIdPut: async (
      id: number,
      radarArc?: RadarArc,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("arcIdPut", "id", id);
      const localVarPath = `/Arc/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        radarArc,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arcOptions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Arc`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "OPTIONS",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new Arc
     * @param {RadarArc} [radarArc] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arcPost: async (
      radarArc?: RadarArc,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Arc`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        radarArc,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ArcApi - functional programming interface
 * @export
 */
export const ArcApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ArcApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Deletes an Arc
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async arcIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.arcIdDelete(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ArcApi.arcIdDelete"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async arcIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RadarArc>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.arcIdGet(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ArcApi.arcIdGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {RadarArc} [radarArc] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async arcIdPut(
      id: number,
      radarArc?: RadarArc,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.arcIdPut(
        id,
        radarArc,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ArcApi.arcIdPut"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async arcOptions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.arcOptions(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ArcApi.arcOptions"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Create a new Arc
     * @param {RadarArc} [radarArc] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async arcPost(
      radarArc?: RadarArc,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.arcPost(
        radarArc,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ArcApi.arcPost"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * ArcApi - factory interface
 * @export
 */
export const ArcApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ArcApiFp(configuration);
  return {
    /**
     *
     * @summary Deletes an Arc
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arcIdDelete(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .arcIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arcIdGet(id: number, options?: any): AxiosPromise<RadarArc> {
      return localVarFp
        .arcIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {RadarArc} [radarArc] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arcIdPut(
      id: number,
      radarArc?: RadarArc,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .arcIdPut(id, radarArc, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arcOptions(options?: any): AxiosPromise<void> {
      return localVarFp
        .arcOptions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new Arc
     * @param {RadarArc} [radarArc] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    arcPost(radarArc?: RadarArc, options?: any): AxiosPromise<void> {
      return localVarFp
        .arcPost(radarArc, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ArcApi - object-oriented interface
 * @export
 * @class ArcApi
 * @extends {BaseAPI}
 */
export class ArcApi extends BaseAPI {
  /**
   *
   * @summary Deletes an Arc
   * @param {number} id The identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArcApi
   */
  public arcIdDelete(id: number, options?: RawAxiosRequestConfig) {
    return ArcApiFp(this.configuration)
      .arcIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the item for the given id
   * @param {number} id The id value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArcApi
   */
  public arcIdGet(id: number, options?: RawAxiosRequestConfig) {
    return ArcApiFp(this.configuration)
      .arcIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update an existing arc
   * @param {number} id The identifier.
   * @param {RadarArc} [radarArc] The value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArcApi
   */
  public arcIdPut(
    id: number,
    radarArc?: RadarArc,
    options?: RawAxiosRequestConfig,
  ) {
    return ArcApiFp(this.configuration)
      .arcIdPut(id, radarArc, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Options implementation for all derivative classes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArcApi
   */
  public arcOptions(options?: RawAxiosRequestConfig) {
    return ArcApiFp(this.configuration)
      .arcOptions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new Arc
   * @param {RadarArc} [radarArc] The value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ArcApi
   */
  public arcPost(radarArc?: RadarArc, options?: RawAxiosRequestConfig) {
    return ArcApiFp(this.configuration)
      .arcPost(radarArc, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * DataControllerBaseApi - axios parameter creator
 * @export
 */
export const DataControllerBaseApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataControllerBaseOptions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/DataControllerBase`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "OPTIONS",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * DataControllerBaseApi - functional programming interface
 * @export
 */
export const DataControllerBaseApiFp = function (
  configuration?: Configuration,
) {
  const localVarAxiosParamCreator =
    DataControllerBaseApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async dataControllerBaseOptions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.dataControllerBaseOptions(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["DataControllerBaseApi.dataControllerBaseOptions"]?.[
          index
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * DataControllerBaseApi - factory interface
 * @export
 */
export const DataControllerBaseApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = DataControllerBaseApiFp(configuration);
  return {
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    dataControllerBaseOptions(options?: any): AxiosPromise<void> {
      return localVarFp
        .dataControllerBaseOptions(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * DataControllerBaseApi - object-oriented interface
 * @export
 * @class DataControllerBaseApi
 * @extends {BaseAPI}
 */
export class DataControllerBaseApi extends BaseAPI {
  /**
   *
   * @summary Options implementation for all derivative classes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DataControllerBaseApi
   */
  public dataControllerBaseOptions(options?: RawAxiosRequestConfig) {
    return DataControllerBaseApiFp(this.configuration)
      .dataControllerBaseOptions(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * ItemApi - axios parameter creator
 * @export
 */
export const ItemApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Deletes the specified identifier.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdDelete: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("itemIdDelete", "id", id);
      const localVarPath = `/Item/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("itemIdGet", "id", id);
      const localVarPath = `/Item/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the notes for this radar item
     * @param {number} id The identifier.
     * @param {number} [page] Gets or sets the page.
     * @param {number} [pageSize] Gets or sets the size of the page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdNoteGet: async (
      id: number,
      page?: number,
      pageSize?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("itemIdNoteGet", "id", id);
      const localVarPath = `/Item/{id}/note`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (page !== undefined) {
        localVarQueryParameter["Page"] = page;
      }

      if (pageSize !== undefined) {
        localVarQueryParameter["PageSize"] = pageSize;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {RadarItem} [radarItem] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdPut: async (
      id: number,
      radarItem?: RadarItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("itemIdPut", "id", id);
      const localVarPath = `/Item/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        radarItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the tags.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdTagGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("itemIdTagGet", "id", id);
      const localVarPath = `/Item/{id}/tag`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the new tag.
     * @param {number} id The identifier.
     * @param {ItemTag} [itemTag] The tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdTagPost: async (
      id: number,
      itemTag?: ItemTag,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("itemIdTagPost", "id", id);
      const localVarPath = `/Item/{id}/tag`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        itemTag,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Saves the tag.
     * @param {number} id The identifier.
     * @param {ItemTag} [itemTag] The tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdTagPut: async (
      id: number,
      itemTag?: ItemTag,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("itemIdTagPut", "id", id);
      const localVarPath = `/Item/{id}/tag`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        itemTag,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Deletes the tag.
     * @param {number} id The identifier.
     * @param {number} tagId The tag identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdTagTagIdDelete: async (
      id: number,
      tagId: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("itemIdTagTagIdDelete", "id", id);
      // verify required parameter 'tagId' is not null or undefined
      assertParamExists("itemIdTagTagIdDelete", "tagId", tagId);
      const localVarPath = `/Item/{id}/tag/{tagId}`
        .replace(`{${"id"}}`, encodeURIComponent(String(id)))
        .replace(`{${"tagId"}}`, encodeURIComponent(String(tagId)));
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemOptions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Item`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "OPTIONS",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new Arc
     * @param {RadarItem} [radarItem] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemPost: async (
      radarItem?: RadarItem,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Item`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        radarItem,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ItemApi - functional programming interface
 * @export
 */
export const ItemApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ItemApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Deletes the specified identifier.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async itemIdDelete(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.itemIdDelete(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ItemApi.itemIdDelete"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async itemIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RadarItem>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.itemIdGet(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ItemApi.itemIdGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the notes for this radar item
     * @param {number} id The identifier.
     * @param {number} [page] Gets or sets the page.
     * @param {number} [pageSize] Gets or sets the size of the page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async itemIdNoteGet(
      id: number,
      page?: number,
      pageSize?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<RadarItemNote>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.itemIdNoteGet(
        id,
        page,
        pageSize,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ItemApi.itemIdNoteGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {RadarItem} [radarItem] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async itemIdPut(
      id: number,
      radarItem?: RadarItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.itemIdPut(
        id,
        radarItem,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ItemApi.itemIdPut"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the tags.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async itemIdTagGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<RadarItemTag>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.itemIdTagGet(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ItemApi.itemIdTagGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Saves the new tag.
     * @param {number} id The identifier.
     * @param {ItemTag} [itemTag] The tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async itemIdTagPost(
      id: number,
      itemTag?: ItemTag,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.itemIdTagPost(
        id,
        itemTag,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ItemApi.itemIdTagPost"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Saves the tag.
     * @param {number} id The identifier.
     * @param {ItemTag} [itemTag] The tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async itemIdTagPut(
      id: number,
      itemTag?: ItemTag,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.itemIdTagPut(
        id,
        itemTag,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ItemApi.itemIdTagPut"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Deletes the tag.
     * @param {number} id The identifier.
     * @param {number} tagId The tag identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async itemIdTagTagIdDelete(
      id: number,
      tagId: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.itemIdTagTagIdDelete(
          id,
          tagId,
          options,
        );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ItemApi.itemIdTagTagIdDelete"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async itemOptions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.itemOptions(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ItemApi.itemOptions"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Create a new Arc
     * @param {RadarItem} [radarItem] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async itemPost(
      radarItem?: RadarItem,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.itemPost(
        radarItem,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["ItemApi.itemPost"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * ItemApi - factory interface
 * @export
 */
export const ItemApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ItemApiFp(configuration);
  return {
    /**
     *
     * @summary Deletes the specified identifier.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdDelete(id: number, options?: any): AxiosPromise<void> {
      return localVarFp
        .itemIdDelete(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdGet(id: number, options?: any): AxiosPromise<RadarItem> {
      return localVarFp
        .itemIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the notes for this radar item
     * @param {number} id The identifier.
     * @param {number} [page] Gets or sets the page.
     * @param {number} [pageSize] Gets or sets the size of the page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdNoteGet(
      id: number,
      page?: number,
      pageSize?: number,
      options?: any,
    ): AxiosPromise<Array<RadarItemNote>> {
      return localVarFp
        .itemIdNoteGet(id, page, pageSize, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {RadarItem} [radarItem] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdPut(
      id: number,
      radarItem?: RadarItem,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .itemIdPut(id, radarItem, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the tags.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdTagGet(id: number, options?: any): AxiosPromise<Array<RadarItemTag>> {
      return localVarFp
        .itemIdTagGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the new tag.
     * @param {number} id The identifier.
     * @param {ItemTag} [itemTag] The tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdTagPost(
      id: number,
      itemTag?: ItemTag,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .itemIdTagPost(id, itemTag, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Saves the tag.
     * @param {number} id The identifier.
     * @param {ItemTag} [itemTag] The tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdTagPut(
      id: number,
      itemTag?: ItemTag,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .itemIdTagPut(id, itemTag, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Deletes the tag.
     * @param {number} id The identifier.
     * @param {number} tagId The tag identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemIdTagTagIdDelete(
      id: number,
      tagId: number,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .itemIdTagTagIdDelete(id, tagId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemOptions(options?: any): AxiosPromise<void> {
      return localVarFp
        .itemOptions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new Arc
     * @param {RadarItem} [radarItem] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    itemPost(radarItem?: RadarItem, options?: any): AxiosPromise<void> {
      return localVarFp
        .itemPost(radarItem, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ItemApi - object-oriented interface
 * @export
 * @class ItemApi
 * @extends {BaseAPI}
 */
export class ItemApi extends BaseAPI {
  /**
   *
   * @summary Deletes the specified identifier.
   * @param {number} id The identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemApi
   */
  public itemIdDelete(id: number, options?: RawAxiosRequestConfig) {
    return ItemApiFp(this.configuration)
      .itemIdDelete(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the item for the given id
   * @param {number} id The id value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemApi
   */
  public itemIdGet(id: number, options?: RawAxiosRequestConfig) {
    return ItemApiFp(this.configuration)
      .itemIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the notes for this radar item
   * @param {number} id The identifier.
   * @param {number} [page] Gets or sets the page.
   * @param {number} [pageSize] Gets or sets the size of the page.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemApi
   */
  public itemIdNoteGet(
    id: number,
    page?: number,
    pageSize?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemApiFp(this.configuration)
      .itemIdNoteGet(id, page, pageSize, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update an existing arc
   * @param {number} id The identifier.
   * @param {RadarItem} [radarItem] The value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemApi
   */
  public itemIdPut(
    id: number,
    radarItem?: RadarItem,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemApiFp(this.configuration)
      .itemIdPut(id, radarItem, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the tags.
   * @param {number} id The identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemApi
   */
  public itemIdTagGet(id: number, options?: RawAxiosRequestConfig) {
    return ItemApiFp(this.configuration)
      .itemIdTagGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Saves the new tag.
   * @param {number} id The identifier.
   * @param {ItemTag} [itemTag] The tag.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemApi
   */
  public itemIdTagPost(
    id: number,
    itemTag?: ItemTag,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemApiFp(this.configuration)
      .itemIdTagPost(id, itemTag, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Saves the tag.
   * @param {number} id The identifier.
   * @param {ItemTag} [itemTag] The tag.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemApi
   */
  public itemIdTagPut(
    id: number,
    itemTag?: ItemTag,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemApiFp(this.configuration)
      .itemIdTagPut(id, itemTag, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Deletes the tag.
   * @param {number} id The identifier.
   * @param {number} tagId The tag identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemApi
   */
  public itemIdTagTagIdDelete(
    id: number,
    tagId: number,
    options?: RawAxiosRequestConfig,
  ) {
    return ItemApiFp(this.configuration)
      .itemIdTagTagIdDelete(id, tagId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Options implementation for all derivative classes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemApi
   */
  public itemOptions(options?: RawAxiosRequestConfig) {
    return ItemApiFp(this.configuration)
      .itemOptions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new Arc
   * @param {RadarItem} [radarItem] The value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ItemApi
   */
  public itemPost(radarItem?: RadarItem, options?: RawAxiosRequestConfig) {
    return ItemApiFp(this.configuration)
      .itemPost(radarItem, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * QuadrantApi - axios parameter creator
 * @export
 */
export const QuadrantApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quadrantIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("quadrantIdGet", "id", id);
      const localVarPath = `/Quadrant/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {Quadrant} [quadrant] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quadrantIdPut: async (
      id: number,
      quadrant?: Quadrant,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("quadrantIdPut", "id", id);
      const localVarPath = `/Quadrant/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        quadrant,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quadrantOptions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Quadrant`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "OPTIONS",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new Arc
     * @param {Quadrant} [quadrant] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quadrantPost: async (
      quadrant?: Quadrant,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Quadrant`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        quadrant,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * QuadrantApi - functional programming interface
 * @export
 */
export const QuadrantApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = QuadrantApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quadrantIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Quadrant>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.quadrantIdGet(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["QuadrantApi.quadrantIdGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {Quadrant} [quadrant] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quadrantIdPut(
      id: number,
      quadrant?: Quadrant,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.quadrantIdPut(
        id,
        quadrant,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["QuadrantApi.quadrantIdPut"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quadrantOptions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.quadrantOptions(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["QuadrantApi.quadrantOptions"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Create a new Arc
     * @param {Quadrant} [quadrant] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async quadrantPost(
      quadrant?: Quadrant,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.quadrantPost(
        quadrant,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["QuadrantApi.quadrantPost"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * QuadrantApi - factory interface
 * @export
 */
export const QuadrantApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = QuadrantApiFp(configuration);
  return {
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quadrantIdGet(id: number, options?: any): AxiosPromise<Quadrant> {
      return localVarFp
        .quadrantIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {Quadrant} [quadrant] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quadrantIdPut(
      id: number,
      quadrant?: Quadrant,
      options?: any,
    ): AxiosPromise<void> {
      return localVarFp
        .quadrantIdPut(id, quadrant, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quadrantOptions(options?: any): AxiosPromise<void> {
      return localVarFp
        .quadrantOptions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new Arc
     * @param {Quadrant} [quadrant] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    quadrantPost(quadrant?: Quadrant, options?: any): AxiosPromise<void> {
      return localVarFp
        .quadrantPost(quadrant, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * QuadrantApi - object-oriented interface
 * @export
 * @class QuadrantApi
 * @extends {BaseAPI}
 */
export class QuadrantApi extends BaseAPI {
  /**
   *
   * @summary Gets the item for the given id
   * @param {number} id The id value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuadrantApi
   */
  public quadrantIdGet(id: number, options?: RawAxiosRequestConfig) {
    return QuadrantApiFp(this.configuration)
      .quadrantIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update an existing arc
   * @param {number} id The identifier.
   * @param {Quadrant} [quadrant] The value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuadrantApi
   */
  public quadrantIdPut(
    id: number,
    quadrant?: Quadrant,
    options?: RawAxiosRequestConfig,
  ) {
    return QuadrantApiFp(this.configuration)
      .quadrantIdPut(id, quadrant, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Options implementation for all derivative classes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuadrantApi
   */
  public quadrantOptions(options?: RawAxiosRequestConfig) {
    return QuadrantApiFp(this.configuration)
      .quadrantOptions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new Arc
   * @param {Quadrant} [quadrant] The value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof QuadrantApi
   */
  public quadrantPost(quadrant?: Quadrant, options?: RawAxiosRequestConfig) {
    return QuadrantApiFp(this.configuration)
      .quadrantPost(quadrant, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RadarApi - axios parameter creator
 * @export
 */
export const RadarApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Radar`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the arcs.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdArcsGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("radarIdArcsGet", "id", id);
      const localVarPath = `/Radar/{id}/arcs`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("radarIdGet", "id", id);
      const localVarPath = `/Radar/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the items.
     * @param {number} id The identifier.
     * @param {number} [arcId] Gets or sets the arc identifier.
     * @param {number} [quadrantId] Gets or sets the quadrant identifier.
     * @param {number} [tagId] Gets or sets the tag identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdItemsGet: async (
      id: number,
      arcId?: number,
      quadrantId?: number,
      tagId?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("radarIdItemsGet", "id", id);
      const localVarPath = `/Radar/{id}/items`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (arcId !== undefined) {
        localVarQueryParameter["ArcId"] = arcId;
      }

      if (quadrantId !== undefined) {
        localVarQueryParameter["QuadrantId"] = quadrantId;
      }

      if (tagId !== undefined) {
        localVarQueryParameter["TagId"] = tagId;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {Radar} [radar] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdPut: async (
      id: number,
      radar?: Radar,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("radarIdPut", "id", id);
      const localVarPath = `/Radar/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        radar,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the quadrants.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdQuadrantsGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("radarIdQuadrantsGet", "id", id);
      const localVarPath = `/Radar/{id}/quadrants`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the tags.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdTagsGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("radarIdTagsGet", "id", id);
      const localVarPath = `/Radar/{id}/tags`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarOptions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Radar`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "OPTIONS",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new Arc
     * @param {Radar} [radar] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarPost: async (
      radar?: Radar,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Radar`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        radar,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RadarApi - functional programming interface
 * @export
 */
export const RadarApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = RadarApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Radar>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.radarGet(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarApi.radarGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the arcs.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarIdArcsGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<RadarArc>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.radarIdArcsGet(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarApi.radarIdArcsGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Radar>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.radarIdGet(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarApi.radarIdGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the items.
     * @param {number} id The identifier.
     * @param {number} [arcId] Gets or sets the arc identifier.
     * @param {number} [quadrantId] Gets or sets the quadrant identifier.
     * @param {number} [tagId] Gets or sets the tag identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarIdItemsGet(
      id: number,
      arcId?: number,
      quadrantId?: number,
      tagId?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<RadarItem>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.radarIdItemsGet(
        id,
        arcId,
        quadrantId,
        tagId,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarApi.radarIdItemsGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {Radar} [radar] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarIdPut(
      id: number,
      radar?: Radar,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.radarIdPut(
        id,
        radar,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarApi.radarIdPut"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the quadrants.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarIdQuadrantsGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<Quadrant>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.radarIdQuadrantsGet(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarApi.radarIdQuadrantsGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the tags.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarIdTagsGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemTag>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.radarIdTagsGet(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarApi.radarIdTagsGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarOptions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.radarOptions(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarApi.radarOptions"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Create a new Arc
     * @param {Radar} [radar] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarPost(
      radar?: Radar,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.radarPost(
        radar,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarApi.radarPost"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * RadarApi - factory interface
 * @export
 */
export const RadarApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RadarApiFp(configuration);
  return {
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarGet(options?: any): AxiosPromise<Array<Radar>> {
      return localVarFp
        .radarGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the arcs.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdArcsGet(id: number, options?: any): AxiosPromise<Array<RadarArc>> {
      return localVarFp
        .radarIdArcsGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdGet(id: number, options?: any): AxiosPromise<Radar> {
      return localVarFp
        .radarIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the items.
     * @param {number} id The identifier.
     * @param {number} [arcId] Gets or sets the arc identifier.
     * @param {number} [quadrantId] Gets or sets the quadrant identifier.
     * @param {number} [tagId] Gets or sets the tag identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdItemsGet(
      id: number,
      arcId?: number,
      quadrantId?: number,
      tagId?: number,
      options?: any,
    ): AxiosPromise<Array<RadarItem>> {
      return localVarFp
        .radarIdItemsGet(id, arcId, quadrantId, tagId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {Radar} [radar] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdPut(id: number, radar?: Radar, options?: any): AxiosPromise<void> {
      return localVarFp
        .radarIdPut(id, radar, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the quadrants.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdQuadrantsGet(
      id: number,
      options?: any,
    ): AxiosPromise<Array<Quadrant>> {
      return localVarFp
        .radarIdQuadrantsGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the tags.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarIdTagsGet(id: number, options?: any): AxiosPromise<Array<ItemTag>> {
      return localVarFp
        .radarIdTagsGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarOptions(options?: any): AxiosPromise<void> {
      return localVarFp
        .radarOptions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new Arc
     * @param {Radar} [radar] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarPost(radar?: Radar, options?: any): AxiosPromise<void> {
      return localVarFp
        .radarPost(radar, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RadarApi - object-oriented interface
 * @export
 * @class RadarApi
 * @extends {BaseAPI}
 */
export class RadarApi extends BaseAPI {
  /**
   *
   * @summary Gets this instance.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarApi
   */
  public radarGet(options?: RawAxiosRequestConfig) {
    return RadarApiFp(this.configuration)
      .radarGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the arcs.
   * @param {number} id The identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarApi
   */
  public radarIdArcsGet(id: number, options?: RawAxiosRequestConfig) {
    return RadarApiFp(this.configuration)
      .radarIdArcsGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the item for the given id
   * @param {number} id The id value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarApi
   */
  public radarIdGet(id: number, options?: RawAxiosRequestConfig) {
    return RadarApiFp(this.configuration)
      .radarIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the items.
   * @param {number} id The identifier.
   * @param {number} [arcId] Gets or sets the arc identifier.
   * @param {number} [quadrantId] Gets or sets the quadrant identifier.
   * @param {number} [tagId] Gets or sets the tag identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarApi
   */
  public radarIdItemsGet(
    id: number,
    arcId?: number,
    quadrantId?: number,
    tagId?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return RadarApiFp(this.configuration)
      .radarIdItemsGet(id, arcId, quadrantId, tagId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update an existing arc
   * @param {number} id The identifier.
   * @param {Radar} [radar] The value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarApi
   */
  public radarIdPut(
    id: number,
    radar?: Radar,
    options?: RawAxiosRequestConfig,
  ) {
    return RadarApiFp(this.configuration)
      .radarIdPut(id, radar, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the quadrants.
   * @param {number} id The identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarApi
   */
  public radarIdQuadrantsGet(id: number, options?: RawAxiosRequestConfig) {
    return RadarApiFp(this.configuration)
      .radarIdQuadrantsGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the tags.
   * @param {number} id The identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarApi
   */
  public radarIdTagsGet(id: number, options?: RawAxiosRequestConfig) {
    return RadarApiFp(this.configuration)
      .radarIdTagsGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Options implementation for all derivative classes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarApi
   */
  public radarOptions(options?: RawAxiosRequestConfig) {
    return RadarApiFp(this.configuration)
      .radarOptions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new Arc
   * @param {Radar} [radar] The value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarApi
   */
  public radarPost(radar?: Radar, options?: RawAxiosRequestConfig) {
    return RadarApiFp(this.configuration)
      .radarPost(radar, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * RadarDataApi - axios parameter creator
 * @export
 */
export const RadarDataApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarDataGet: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/RadarData`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the specified identifier.
     * @param {number} id The identifier.
     * @param {Array<number>} [tags] Gets or sets the tags.
     * @param {number} [updatedWithinDays] Gets or sets the updated within days.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarDataIdGet: async (
      id: number,
      tags?: Array<number>,
      updatedWithinDays?: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("radarDataIdGet", "id", id);
      const localVarPath = `/RadarData/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      if (tags) {
        localVarQueryParameter["Tags"] = tags;
      }

      if (updatedWithinDays !== undefined) {
        localVarQueryParameter["UpdatedWithinDays"] = updatedWithinDays;
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Gets the tags.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarDataIdTagsGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("radarDataIdTagsGet", "id", id);
      const localVarPath = `/RadarData/{id}/tags`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarDataOptions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/RadarData`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "OPTIONS",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * RadarDataApi - functional programming interface
 * @export
 */
export const RadarDataApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator =
    RadarDataApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarDataGet(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Radar>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.radarDataGet(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarDataApi.radarDataGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the specified identifier.
     * @param {number} id The identifier.
     * @param {Array<number>} [tags] Gets or sets the tags.
     * @param {number} [updatedWithinDays] Gets or sets the updated within days.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarDataIdGet(
      id: number,
      tags?: Array<number>,
      updatedWithinDays?: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RadarData>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.radarDataIdGet(
        id,
        tags,
        updatedWithinDays,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarDataApi.radarDataIdGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Gets the tags.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarDataIdTagsGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ItemTag>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.radarDataIdTagsGet(id, options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarDataApi.radarDataIdTagsGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async radarDataOptions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.radarDataOptions(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["RadarDataApi.radarDataOptions"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * RadarDataApi - factory interface
 * @export
 */
export const RadarDataApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = RadarDataApiFp(configuration);
  return {
    /**
     *
     * @summary Gets this instance.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarDataGet(options?: any): AxiosPromise<Array<Radar>> {
      return localVarFp
        .radarDataGet(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the specified identifier.
     * @param {number} id The identifier.
     * @param {Array<number>} [tags] Gets or sets the tags.
     * @param {number} [updatedWithinDays] Gets or sets the updated within days.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarDataIdGet(
      id: number,
      tags?: Array<number>,
      updatedWithinDays?: number,
      options?: any,
    ): AxiosPromise<RadarData> {
      return localVarFp
        .radarDataIdGet(id, tags, updatedWithinDays, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Gets the tags.
     * @param {number} id The identifier.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarDataIdTagsGet(
      id: number,
      options?: any,
    ): AxiosPromise<Array<ItemTag>> {
      return localVarFp
        .radarDataIdTagsGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    radarDataOptions(options?: any): AxiosPromise<void> {
      return localVarFp
        .radarDataOptions(options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * RadarDataApi - object-oriented interface
 * @export
 * @class RadarDataApi
 * @extends {BaseAPI}
 */
export class RadarDataApi extends BaseAPI {
  /**
   *
   * @summary Gets this instance.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarDataApi
   */
  public radarDataGet(options?: RawAxiosRequestConfig) {
    return RadarDataApiFp(this.configuration)
      .radarDataGet(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the specified identifier.
   * @param {number} id The identifier.
   * @param {Array<number>} [tags] Gets or sets the tags.
   * @param {number} [updatedWithinDays] Gets or sets the updated within days.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarDataApi
   */
  public radarDataIdGet(
    id: number,
    tags?: Array<number>,
    updatedWithinDays?: number,
    options?: RawAxiosRequestConfig,
  ) {
    return RadarDataApiFp(this.configuration)
      .radarDataIdGet(id, tags, updatedWithinDays, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Gets the tags.
   * @param {number} id The identifier.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarDataApi
   */
  public radarDataIdTagsGet(id: number, options?: RawAxiosRequestConfig) {
    return RadarDataApiFp(this.configuration)
      .radarDataIdTagsGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Options implementation for all derivative classes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof RadarDataApi
   */
  public radarDataOptions(options?: RawAxiosRequestConfig) {
    return RadarDataApiFp(this.configuration)
      .radarDataOptions(options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TagApi - axios parameter creator
 * @export
 */
export const TagApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagIdGet: async (
      id: number,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("tagIdGet", "id", id);
      const localVarPath = `/Tag/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {Tag} [tag] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagIdPut: async (
      id: number,
      tag?: Tag,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("tagIdPut", "id", id);
      const localVarPath = `/Tag/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PUT",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tag,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagOptions: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Tag`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "OPTIONS",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @summary Create a new Arc
     * @param {Tag} [tag] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagPost: async (
      tag?: Tag,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/Tag`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        tag,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TagApi - functional programming interface
 * @export
 */
export const TagApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TagApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async tagIdGet(
      id: number,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.tagIdGet(
        id,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["TagApi.tagIdGet"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {Tag} [tag] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async tagIdPut(
      id: number,
      tag?: Tag,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.tagIdPut(
        id,
        tag,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["TagApi.tagIdPut"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async tagOptions(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.tagOptions(options);
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["TagApi.tagOptions"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
    /**
     *
     * @summary Create a new Arc
     * @param {Tag} [tag] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async tagPost(
      tag?: Tag,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.tagPost(
        tag,
        options,
      );
      const index = configuration?.serverIndex ?? 0;
      const operationBasePath =
        operationServerMap["TagApi.tagPost"]?.[index]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, operationBasePath || basePath);
    },
  };
};

/**
 * TagApi - factory interface
 * @export
 */
export const TagApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TagApiFp(configuration);
  return {
    /**
     *
     * @summary Gets the item for the given id
     * @param {number} id The id value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagIdGet(id: number, options?: any): AxiosPromise<Tag> {
      return localVarFp
        .tagIdGet(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Update an existing arc
     * @param {number} id The identifier.
     * @param {Tag} [tag] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagIdPut(id: number, tag?: Tag, options?: any): AxiosPromise<void> {
      return localVarFp
        .tagIdPut(id, tag, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Options implementation for all derivative classes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagOptions(options?: any): AxiosPromise<void> {
      return localVarFp
        .tagOptions(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @summary Create a new Arc
     * @param {Tag} [tag] The value.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tagPost(tag?: Tag, options?: any): AxiosPromise<void> {
      return localVarFp
        .tagPost(tag, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TagApi - object-oriented interface
 * @export
 * @class TagApi
 * @extends {BaseAPI}
 */
export class TagApi extends BaseAPI {
  /**
   *
   * @summary Gets the item for the given id
   * @param {number} id The id value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagApi
   */
  public tagIdGet(id: number, options?: RawAxiosRequestConfig) {
    return TagApiFp(this.configuration)
      .tagIdGet(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Update an existing arc
   * @param {number} id The identifier.
   * @param {Tag} [tag] The value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagApi
   */
  public tagIdPut(id: number, tag?: Tag, options?: RawAxiosRequestConfig) {
    return TagApiFp(this.configuration)
      .tagIdPut(id, tag, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Options implementation for all derivative classes.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagApi
   */
  public tagOptions(options?: RawAxiosRequestConfig) {
    return TagApiFp(this.configuration)
      .tagOptions(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @summary Create a new Arc
   * @param {Tag} [tag] The value.
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TagApi
   */
  public tagPost(tag?: Tag, options?: RawAxiosRequestConfig) {
    return TagApiFp(this.configuration)
      .tagPost(tag, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
